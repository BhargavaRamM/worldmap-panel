{"version":3,"sources":["../src/worldmap_ctrl.js"],"names":["MetricsPanelCtrl","TimeSeries","kbn","_","mapRenderer","DataFormatter","panelDefaults","maxDataPoints","mapCenter","mapCenterLatitude","mapCenterLongitude","initialZoom","valueName","circleMinSize","circleMaxSize","locationData","thresholds","colors","unitSingle","unitPlural","showLegend","esMetric","decimals","WorldmapCtrl","$scope","$injector","contextSrv","setMapProvider","defaults","panel","dataFormatter","events","on","onInitEditMode","bind","onDataReceived","onPanelTeardown","onDataSnapshotLoad","loadLocationDataFromFile","tileServer","user","lightTheme","setMapSaturationClass","saturationClass","reload","map","snapshotLocationData","locations","jsonpUrl","jsonpCallback","window","$","ajax","type","url","contentType","dataType","success","res","render","jsonUrl","getJSON","then","reloadLocations","refresh","remove","addEditorTab","dataList","dashboard","snapshot","data","setGeohashValues","tableData","tableHandler","setTableValues","series","seriesHandler","setValues","updateThresholdData","snapshotData","seriesData","datapoints","alias","target","flotpairs","getFlotPairs","nullPointMode","mapCenterrLatitude","mapCenterMoved","setZoom","removeLegend","legend","update","split","strValue","Number","trim","scope","elem","attrs","ctrl","templateUrl"],"mappings":"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","file":"worldmap_ctrl.js","sourcesContent":["/* eslint import/no-extraneous-dependencies: 0 */\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport TimeSeries from 'app/core/time_series2';\nimport kbn from 'app/core/utils/kbn';\n\nimport _ from 'lodash';\nimport mapRenderer from './map_renderer';\nimport DataFormatter from './data_formatter';\nimport './css/worldmap-panel.css!';\n\nconst panelDefaults = {\n  maxDataPoints: 1,\n  mapCenter: '(0째, 0째)',\n  mapCenterLatitude: 0,\n  mapCenterLongitude: 0,\n  initialZoom: 5,\n  valueName: 'total',\n  circleMinSize: 2,\n  circleMaxSize: 30,\n  locationData: 'countries',\n  thresholds: '0,10',\n  colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\n  unitSingle: '',\n  unitPlural: '',\n  showLegend: true,\n  esMetric: 'Count',\n  decimals: 0\n};\n\n/*\nconst mapCenters = {\n  '(0째, 0째)': {mapCenterLatitude: 0, mapCenterLongitude: 0},\n  'North America': {mapCenterLatitude: 40, mapCenterLongitude: -100},\n  'Europe': {mapCenterLatitude: 46, mapCenterLongitude: 14},\n  'West Asia': {mapCenterLatitude: 26, mapCenterLongitude: 53},\n  'SE Asia': {mapCenterLatitude: 10, mapCenterLongitude: 106}\n};\n*/\n\nexport default class WorldmapCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector, contextSrv) {\n    super($scope, $injector);\n\n    this.setMapProvider(contextSrv);\n    _.defaults(this.panel, panelDefaults);\n\n    this.dataFormatter = new DataFormatter(this, kbn);\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\n\n    this.loadLocationDataFromFile();\n  }\n\n  setMapProvider(contextSrv) {\n    this.tileServer = contextSrv.user.lightTheme ? 'CartoDB Positron' : 'CartoDB Dark';\n    this.setMapSaturationClass();\n  }\n\n  setMapSaturationClass() {\n    if (this.tileServer === 'CartoDB Dark') {\n      this.saturationClass = 'map-darken';\n    } else {\n      this.saturationClass = '';\n    }\n  }\n\n  loadLocationDataFromFile(reload) {\n    if (this.map && !reload) return;\n\n    if (this.panel.snapshotLocationData) {\n      this.locations = this.panel.snapshotLocationData;\n      return;\n    }\n\n    if (this.panel.locationData === 'jsonp endpoint') {\n      if (!this.panel.jsonpUrl || !this.panel.jsonpCallback) return;\n\n      window.$.ajax({\n        type: 'GET',\n        url: this.panel.jsonpUrl + '?callback=?',\n        contentType: 'application/json',\n        jsonpCallback: this.panel.jsonpCallback,\n        dataType: 'jsonp',\n        success: (res) => {\n          this.locations = res;\n          this.render();\n        }\n      });\n    } else if (this.panel.locationData === 'json endpoint') {\n      if (!this.panel.jsonUrl) return;\n\n      window.$.getJSON(this.panel.jsonUrl).then((res) => {\n        this.locations = res;\n        this.render();\n      });\n    } else if (this.panel.locationData === 'table') {\n      // .. Do nothing\n    } else if (this.panel.locationData !== 'geohash') {\n      window.$.getJSON('public/plugins/grafana-worldmap-panel/data/' + this.panel.locationData + '.json')\n        .then(this.reloadLocations.bind(this));\n    }\n  }\n\n  reloadLocations(res) {\n    this.locations = res;\n    this.refresh();\n  }\n\n  onPanelTeardown() {\n    if (this.map) this.map.remove();\n  }\n\n  onInitEditMode() {\n    this.addEditorTab('Worldmap', 'public/plugins/grafana-worldmap-panel/editor.html', 2);\n  }\n\n  onDataReceived(dataList) {\n    if (!dataList) return;\n\n    if (this.dashboard.snapshot && this.locations) {\n      this.panel.snapshotLocationData = this.locations;\n    }\n\n    const data = [];\n\n    if (this.panel.locationData === 'geohash') {\n      this.dataFormatter.setGeohashValues(dataList, data);\n    } else if (this.panel.locationData === 'table') {\n      const tableData = dataList.map(DataFormatter.tableHandler.bind(this));\n      this.dataFormatter.setTableValues(tableData, data);\n    } else {\n      this.series = dataList.map(this.seriesHandler.bind(this));\n      this.dataFormatter.setValues(data);\n    }\n    this.data = data;\n\n    this.updateThresholdData();\n\n    this.render();\n  }\n\n  onDataSnapshotLoad(snapshotData) {\n    this.onDataReceived(snapshotData);\n  }\n\n  seriesHandler(seriesData) {\n    const series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n    return series;\n  }\n\n  setNewMapCenter() {\n    //this.panel.mapCenterLatitude = mapCenters[this.panel.mapCenter].mapCenterLatitude;\n    //this.panel.mapCenterLongitude = mapCenters[this.panel.mapCenter].mapCenterLongitude;\n    this.panel.mapCenterrLatitude = this.panel.mapCenterLatitude;\n    this.panel.mapCenterLongitude = this.panel.mapCenterLongitude;\n    this.mapCenterMoved = true;\n    this.render();\n  }\n\n  setZoom() {\n    this.map.setZoom(this.panel.initialZoom);\n  }\n\n  toggleLegend() {\n    if (!this.panel.showLegend) {\n      this.map.removeLegend();\n    }\n    this.render();\n  }\n\n  changeThresholds() {\n    this.updateThresholdData();\n    this.map.legend.update();\n    this.render();\n  }\n\n  updateThresholdData() {\n    this.data.thresholds = this.panel.thresholds.split(',').map((strValue) => {\n      return Number(strValue.trim());\n    });\n  }\n\n  changeLocationData() {\n    this.loadLocationDataFromFile(true);\n\n    if (this.panel.locationData === 'geohash') {\n      this.render();\n    }\n  }\n\n/* eslint class-methods-use-this: 0 */\n  link(scope, elem, attrs, ctrl) {\n    mapRenderer(scope, elem, attrs, ctrl);\n  }\n}\n\nWorldmapCtrl.templateUrl = 'module.html';\n"]}